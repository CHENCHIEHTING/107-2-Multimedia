In [0]:
import cv2
In [0]:
img=cv2.imread('1.jpg',1)
img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)
img.shape
Out[0]:
(320, 450, 3)
In [0]:
img.size
Out[0]:
432000
In [0]:
img.dtype
Out[0]:
dtype('uint8')
In [0]:
img2=cv2.imread('2.jpg',1)

img2=cv2.cvtColor(img2,cv2.COLOR_BGR2RGB)
In [0]:
from matplotlib import  pyplot as plt
In [0]:
plt.figure(num='origin',figsize=(8,8))
plt.subplot(1,2,1)
plt.title('lena')
plt.imshow(img)

plt.subplot(1,2,2)
plt.title('monkey')
plt.imshow(img2)   


plt.show()

In [0]:
plt.figure(num='arithmetic',figsize=(12,8))
plt.subplot(1,3,1)
plt.title('Addition')
plt.imshow(cv2.add(img,img2))
plt.subplot(1,3,2)
plt.title('img-img2')
plt.imshow(cv2.subtract(img,img2))

plt.subplot(1,3,3)
plt.title('img-img2')
plt.imshow(cv2.subtract(img2,img))

plt.show
Out[0]:
<function matplotlib.pyplot.show(*args, **kw)>

In [0]:
plt.figure(num='blending',figsize=(8,8))
plt.title('blend')
plt.imshow(cv2.addWeighted(img,0.5,img,0.5,0))
plt.show()

In [0]:
formula=cv2.imread('lena.png',0)
plt.imshow(formula,cmap='gray')
plt.show()

In [0]:
import numpy as np
import time

for i in np.linspace(0,1,40):
    alpha=i
    beta=1-alpha
    print ('ALPHA='+str(alpha)+'BETA='+str(beta))
    plt.title('blending')
    plt.imshow(cv2.addWeighted(img,alpha,img2,beta,0))
    plt.show()
ALPHA=0.0BETA=1.0

ALPHA=0.02564102564102564BETA=0.9743589743589743

ALPHA=0.05128205128205128BETA=0.9487179487179487

ALPHA=0.07692307692307693BETA=0.9230769230769231

ALPHA=0.10256410256410256BETA=0.8974358974358975

ALPHA=0.1282051282051282BETA=0.8717948717948718

ALPHA=0.15384615384615385BETA=0.8461538461538461

ALPHA=0.1794871794871795BETA=0.8205128205128205

ALPHA=0.20512820512820512BETA=0.7948717948717949

ALPHA=0.23076923076923075BETA=0.7692307692307693

ALPHA=0.2564102564102564BETA=0.7435897435897436

ALPHA=0.28205128205128205BETA=0.717948717948718

ALPHA=0.3076923076923077BETA=0.6923076923076923

ALPHA=0.3333333333333333BETA=0.6666666666666667

ALPHA=0.358974358974359BETA=0.641025641025641

ALPHA=0.3846153846153846BETA=0.6153846153846154

ALPHA=0.41025641025641024BETA=0.5897435897435898

ALPHA=0.4358974358974359BETA=0.5641025641025641

ALPHA=0.4615384615384615BETA=0.5384615384615385

ALPHA=0.48717948717948717BETA=0.5128205128205128

ALPHA=0.5128205128205128BETA=0.4871794871794872

ALPHA=0.5384615384615384BETA=0.46153846153846156

ALPHA=0.5641025641025641BETA=0.4358974358974359

ALPHA=0.5897435897435898BETA=0.41025641025641024

ALPHA=0.6153846153846154BETA=0.3846153846153846

ALPHA=0.641025641025641BETA=0.35897435897435903

ALPHA=0.6666666666666666BETA=0.33333333333333337

ALPHA=0.6923076923076923BETA=0.3076923076923077

ALPHA=0.717948717948718BETA=0.28205128205128205

ALPHA=0.7435897435897436BETA=0.2564102564102564

ALPHA=0.7692307692307692BETA=0.23076923076923084

ALPHA=0.7948717948717948BETA=0.20512820512820518

ALPHA=0.8205128205128205BETA=0.17948717948717952

ALPHA=0.8461538461538461BETA=0.15384615384615385

ALPHA=0.8717948717948718BETA=0.1282051282051282

ALPHA=0.8974358974358974BETA=0.10256410256410264

ALPHA=0.923076923076923BETA=0.07692307692307698

ALPHA=0.9487179487179487BETA=0.05128205128205132

ALPHA=0.9743589743589743BETA=0.02564102564102566

ALPHA=1.0BETA=0.0

In [0]:
img3=cv2.imread('monkey.jpeg',1)
b,g,r=cv2.split(img3)


plt.figure(num='split',figsize=(8,8))
plt.subplot(2,2,1)
plt.title('Origin')
plt.imshow(cv2.cvtColor(img3,cv2.COLOR_BGR2RGB))


plt.subplot(2,2,2)
plt.title('Blue Channel')
plt.imshow(b)

plt.subplot(2,2,3)
plt.title('Green Channel')
plt.imshow(g)


plt.subplot(2,2,4)
plt.title('RedChannel')
plt.imshow(r)

plt.show()

In [0]:
plt.figure(num='negative',figsize=(12,8))
plt.subplot(1,3,1)
plt.title('Origin')
origin=cv2.cvtColor(img3,cv2.COLOR_BGR2RGB)
plt.imshow(origin)


plt.subplot(1,3,2)
plt.title('Grayscale')
grayscale=cv2.cvtColor(origin,cv2.COLOR_RGB2GRAY)
plt.imshow(grayscale,cmap='gray')

plt.subplot(1,3,3)
plt.title('Negative')
negative=abs(255-grayscale)
plt.imshow(negative,cmap='gray')


plt.show()

In [0]:
plt.title('Negative2')
plt.imshow(grayscale,cmap='gray_r')
plt.show()

In [0]:
img4=cv2.imread('1.jpg',0)
img5=cv2.imread('2.jpg',0)
img4.shape
Out[0]:
(320, 450)
In [0]:
not_out=cv2.bitwise_not(img4)
and_out=cv2.bitwise_and(img4,img5)
or_out=cv2.bitwise_or(img4,img5)
xor_out=cv2.bitwise_xor(img4,img5)

titles=['Image 4','Image 5','Image 4 NOT','AND','OR','XOR']
        
images=[img4,img5,not_out,and_out,or_out,xor_out]
        
        
plt.figure(num='barcode',figsize=(12,8))
for i in range(6):
        plt.subplot(2,3,i+1)
        plt.imshow(images[i],cmap='gray')
        plt.title(titles[i])
        plt.xticks([]),plt.yticks([])
        cv2.imwrite('1.png'+str(titles[i])+'.png',images[i])
        plt.show()






In [0]:
plt.imshow(cv2.bitwise_not(and_out),cmap='gray')
plt.show()

In [0]:
and_out2=cv2.bitwise_and(cv2.bitwise_not(and_out),or_out)
plt.imshow(and_out2,cmap='gray')
plt.show()

In [0]:
import numpy as np
image=np.zeros((200,200,3),np.uint8)
cv2.line(image,(0,190),(199,0),(0,0,255),2)
Out[0]:
array([[[  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0],
        ...,
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255]],

       [[  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0],
        ...,
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255]],

       [[  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0],
        ...,
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255]],

       ...,

       [[  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0],
        ...,
        [  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0]],

       [[  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0],
        ...,
        [  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0]],

       [[  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0],
        ...,
        [  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0]]], dtype=uint8)
In [0]:
cv2.rectangle(image,(20,20),(60,60),(255,0,0),1)
Out[0]:
array([[[  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0],
        ...,
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255]],

       [[  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0],
        ...,
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255]],

       [[  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0],
        ...,
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255]],

       ...,

       [[  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0],
        ...,
        [  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0]],

       [[  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0],
        ...,
        [  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0]],

       [[  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0],
        ...,
        [  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0]]], dtype=uint8)
In [0]:
cv2.circle (image,(80,80),10, (0,255,0),-1)
Out[0]:
array([[[  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0],
        ...,
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255]],

       [[  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0],
        ...,
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255]],

       [[  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0],
        ...,
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255]],

       ...,

       [[  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0],
        ...,
        [  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0]],

       [[  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0],
        ...,
        [  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0]],

       [[  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0],
        ...,
        [  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0]]], dtype=uint8)
In [0]:
cv2.ellipse(image,(99,99),(40,20),0,0,360,(128,128,128),-1)
Out[0]:
array([[[  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0],
        ...,
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255]],

       [[  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0],
        ...,
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255]],

       [[  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0],
        ...,
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255]],

       ...,

       [[  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0],
        ...,
        [  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0]],

       [[  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0],
        ...,
        [  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0]],

       [[  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0],
        ...,
        [  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0]]], dtype=uint8)
In [0]:
points=np.array([[100,5],[125,30],[175,20],[185,10]],np.int32)
...,
points=points.reshape ((-1,1,2)) 
cv2.polylines(image,[points],True,(255,255,0))
Out[0]:
array([[[  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0],
        ...,
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255]],

       [[  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0],
        ...,
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255]],

       [[  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0],
        ...,
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255]],

       ...,

       [[  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0],
        ...,
        [  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0]],

       [[  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0],
        ...,
        [  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0]],

       [[  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0],
        ...,
        [  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0]]], dtype=uint8)
In [0]:
cv2.putText(image,'Text',(80,180),cv2.FONT_HERSHEY_DUPLEX,1,(255,0,255))
Out[0]:
array([[[  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0],
        ...,
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255]],

       [[  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0],
        ...,
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255]],

       [[  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0],
        ...,
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255]],

       ...,

       [[  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0],
        ...,
        [  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0]],

       [[  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0],
        ...,
        [  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0]],

       [[  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0],
        ...,
        [  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0]]], dtype=uint8)
In [0]:
plt.title('Shapes')
plt.imshow(cv2.cvtColor(image,cv2.COLOR_BGR2RGB))
plt.show()

In [0]:
import numpy as np
import cv2
from PIL import ImageFont,ImageDraw,Image
img=np.zeros((450,450,3),np.uint8)

img[:]=(0,0,255)
text='小熊\n維尼'
fontPath='兒風體W4.ttc'
font=ImageFont.truetype(fontPath,192)
imgPil=Image.fromarray(img)
draw=ImageDraw.Draw(imgPil)
draw.text((30,30),text,font=font,fill=(0,0,0))
img=np.array(imgPil)
plt.imshow(img[:,:,::-1])
plt.show()

In [0]:
